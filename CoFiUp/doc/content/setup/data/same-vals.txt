this::
    date = 2023-04-15


abbrev::
    examples = ?/examples/about2pyproj


================================
Reprendre des valeurs identiques
================================

Considérons le fichier ¨yaml suivant qui décrit le projet ¨cofiup de façon humaine, mais aussi informatiquement utilisable. Ce fichier est géré manuellement par le développeur.

yaml::
    ---
    title = Le fichier path::''about.yaml'' de ¨cofiup
    path  = ¨examples/about.yaml
    ---


Pour utiliser l'excellentissime ¨poetry, il faut aussi produire un fichier path::''pyproject.toml'' comme le suivant.

toml::
    ---
    title = Le fichier path::''pyproject.toml'' de ¨cofiup
    path  = ¨examples/pyproject.toml
    ---


Certaines clés ont des valeurs identiques.

    1) yaml::''desc'' dans path::''about.yaml'' correspond à toml::''description'' dans path::''pyproject.toml''.

    1) yaml::''repository'' et yaml::''authors'' dans path::''about.yaml'' sont aussi présents dans path::''pyproject.toml''.
    Notons que pour yaml::''authors'', on part d'une liste de textes pour mettre à jour une autre liste de textes, ceci sans avoir à itérer sur la liste d'auteurs (ce sujet sera abordé dans la section suivante).


Voyons comment indiquer à ¨cofiup de mettre à jour, de façon semi-automatisée, les valeurs des clés "communes" de path::''about.yaml'' vers path::''pyproject.toml''.
Pour ce faire, il suffit d'utiliser le fichier de ¨cfg suivant, puis ensuite d'utiliser une ligne de commandes, ou un petit script ¨python (deux sujets qui seront abordés plus tard).
Nous supposons ici que le fichier de ¨cfg et les deux fichiers de données présentés ci-dessus sont tous dans le même dossier
((
    Cette hypothèse simplifie les chemins relatifs utilisés, mais n'est en rien une contrainte ¨tech.
)).

cofiup::
    ---
    title = Le fichier path::''cfg.cfup.yaml''
    path  = ¨examples/cfg.cfup.yaml
    ---


Ce fichier s'appuie sur les deux blocs cofiup::''data'' et cofiup::''update''.
Commençons par expliquer le contenu du bloc cofiup::''data'' servant à analyser, au choix, des fichiers de données structurées du type ¨json, ¨toml ou ¨yaml
((
    Le support d'autres types de fichiers structurés est envisageable à la demande.
)).

    1) Les règles définies doivent ¨tjrs être nommées : ici, il y a juste la règle cofiup::''about''.

    1) L'extraction de données se fait ensuite en indiquant comment stocker ce qui est découvert : ici, cofiup::''storein: dict'' demande d'user d'un dictonnaire ¨python.
    Il est aussi possible d'utiliser une ¨struct de type base de données via cofiup::''storein: database'' : voir cf::''?/textual/template/extract.txt'' à ce sujet.

    1) Vient alors le moyen de trouver le, ou les fichiers à analyser via un motif à la ¨unix, la recherche se faisant relativement au dossier du fichier de ¨cfg. Ici, cofiup::''path: about.yaml'' pointe juste vers le fichier ¨src.
    Il est aussi possible de passer via une ¨regex_FR. Ceci permet aussi, si besoin, d'extraire des ¨infos dans les chemins des fichiers analysés : voir de nouveau cf::''?/textual/template/extract.txt'' à ce sujet.

    1) Enfin le bloc cofiup::''keep'' permet d'indiquer des "chemins de clés" mimant la ¨struc du fichier ¨src afin d'indiquer ce qui doit être extrait pour une utilisation ultérieure. Bien noter que l'on utilise une liste de "chemins", d'où les tirets : par exemple, nous avons ici la clé cofiup::''repository'' qui se trouve dans le sous-bloc cofiup::''sources'' du bloc cofiup::''general'' dans le fichier path::''about.yaml''.


info::
    Pour garder absoluement ¨ttes les données, il suffit de passer via yaml::''keep: *''.


Passons maintenant au bloc cofiup::''update'' qui est organisé de façon similaire au bloc cofiup::''data'', et qui sert à mettre à jour des fichiers cibles.

    1) Pour la règle indiquée, de nom cofiup::''pyproject'', nous utilisons le sous-bloc cofiup::''data'' car le fichier à modifier est de type ¨json, ¨toml ou ¨yaml (nous ferons connaissance plus tard avec d'autres types de sous-blocs).

    1) Vient alors cofiup::''path: pyproject.toml'' pour indiquer le fichier cible à modifier, de nouveau via un motif à la ¨unix relativement au dossier du fichier de ¨cfg.

    1) Pour finir, les valeurs à modifier sont indiquées dans le bloc cofiup::''change'' via une liste de "chemins de clés" mimant la ¨struc du fichier cible. Indiquons deux particularités.

        * cofiup::''description = desc'' indique que la valeur de la clé ciblée cofiup::''description'' est égale à la valeur de la clé cofiup::''desc'' du fichier ¨src.

        * cofiup::''repository'' est un raccourci très pratique pour cofiup::''repository = repository''.


info::
    En interne, les données utilisables pour les ¨majs se trouvent dans un dictionnaire dont les valeurs seront des ¨dicts, des listes, ¨etou juste des "chaînes de caractères" ¨python (pas de nombres, pas de dates, ...).


Finissons avec deux fonctionnalités bien utiles présentes dans le fichier suivant.

cofiup::
    ---
    title = Le fichier path::''cfg-alias.cfup.yaml''
    path  = ¨examples/cfg-alias.cfup.yaml
    ---


Voici ce qui est utilisé dans le code ci-dessus.

    1) cofiup::''tool.poetry'' et cofiup::''general.sources'' utilisent une notation "pointée" permettant de limiter le ¨nbre de lignes tapées : un point correspond à l'ouverture d'un bloc comme c'est l'usage dans les fichiers de type ¨toml.

    1) cofiup::''repository @ dt_repo'' sert à définir l'alias cofiup::''dt_repo''
    ((
        Le cofiup::''dt'' est pour "data".
    ))
    pour un usage ultérieur. Retenir que cofiup::''@'' vient de "@-lias".


tip::
    Les alias permettent de ne pas dépendre de la ¨struct des fichiers ¨src. Il est vivement conseillé de les employer même si cela semble très verbeux.
