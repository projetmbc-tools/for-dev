this::
    date = 2023-04-16


abbrev::
    examples = ?/examples/autoversion



==============================
Pré-gestion simple des données
==============================

Dans le fichier suivant se trouve le ¨numver d'un project fictif.

toml::
    ---
    title = Le fichier path::''pyproject.toml'' de ¨cofiup
    path  = ¨examples/pyproject.toml
    ---


Imaginons qu'un outil ait produit le fichier ¨yaml ci-dessous contenant l'historique complet des ¨numsver à un instant donné.

yaml::
    ---
    title = Le fichier path::''VERSIONS.yaml''
    path  = ¨examples/VERSIONS.yaml
    ---


Comment faire pour mettre à jour path::''pyproject.toml'' relativement à chaque ¨chgt de l'historique ci-dessus ?
Ceci est faisable via le fichier de ¨cfg suivant.

cofiup::
    ---
    title = Le fichier path::''cfg.cfup.yaml''
    path  = ¨examples/cfg.cfup.yaml
    ---


Comment fonctionne ce qui précède ?

    1) Les blocs cofiup::''data'' et cofiup::''update'' définissent ce qui est extrait et ce qui sera mis à jour comme vu dans la section précédente.

    1) C'est le bloc cofiup::''handler''
    ((
        "handler" peut se traduire par "manipulateur".
    ))
    qui permet ici de créer une ¨nelle donnée à partir de celles connues
    ((
        Pour des cas plus complexes, la seule solution sera de passer via l'¨api ¨python de ¨cofiup.
    )).
    Noter l'utilisation d'une liste à la sauce ¨yaml car il est possible de cumuler des traitements : nous reviendrons sur ceci dans cf::''?/textual/handler.txt''.

        * Le bloc cofiup::''dt_last_version'' indique qu'une ¨nelle donnée cofiup::''dt_last_version'' va être fabriquée et ajoutée dans le ¨dict des données utilisables.

        * cofiup::''jinjang: ...'' indique l'utilisation de ¨jinjang pour manipuler les données existantes afin d'en créer un ¨nelle
        ((
            L'avenir dira si d'autres types d'outils seront ajoutés...
        )).

        * La création de la ¨nelle donnée est indiquée via le code jinjang::''{{ history }} | list | sort | last'' que nous devons protéger entre des guillemets vis à vis de la syntaxe ¨yaml.
        Ici nous itérons sur le dictionnnaire cofiup::''history'' pour en faire la liste des ¨numsver, celle-ci étant ensuite triée pour en extraire le dernier ¨elt
        ((
            Le contrat est respecté ici car la comparaison des ¨numsver est "simple".
            Avec l'utilisation d'une partie "release", l'¨api ¨python de ¨cofiup serait nécessaire.
        )).


info::
    Dans le bloc cofiup::''handler'', chaque ¨nelle donnée construite est utilisable pour ce qui suit : la création se fait de façon séquentielle.
